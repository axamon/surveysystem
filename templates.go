// Code generated by go-bindata.
// sources:
// templates/error.gohtml
// templates/footer.gohtml
// templates/grazie.gohtml
// templates/header.gohtml
// templates/index.gohtml
// templates/logout.gohtml
// templates/survey.gohtml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesErrorGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\x4a\x04\x41\x10\x44\xf3\x85\xfd\x87\x76\xc0\xd4\x06\xef\xcc\x7a\x07\x44\x0f\xcc\x34\x30\x31\x92\x76\xb7\x6f\x67\x60\x67\xfa\xe8\x69\x11\x3d\xee\xdf\xc5\xf5\x4c\x8c\x8a\x82\x2a\xea\x15\x5d\xdc\x3f\xde\x3d\xbf\x3c\xed\x20\x79\x59\x62\xdf\xd1\x59\x8f\x47\x97\x72\x58\xd8\x05\x42\x12\x9e\xc4\xc2\xe9\xd4\x77\xe4\xd9\x17\x89\x3b\x33\x35\x21\xfc\x75\x7d\x47\x6f\x3a\x7d\xc6\xbe\x03\x00\xca\x65\x86\x66\xe3\x10\xb0\x39\x7b\x1e\x71\xd1\x39\xd7\x57\xf9\xa9\x5c\x1d\xea\x1c\xe0\x23\x4f\x9e\x86\xeb\x9b\x4b\x5c\x07\xb7\xf1\xf6\xdd\xa5\x7a\x1e\xf9\x2b\x6b\x15\x10\x33\x76\x06\x05\x6e\x4d\xaa\x0b\x61\xda\xae\xc9\x4d\x24\x86\x64\xb2\x1f\x02\x86\xf8\xa0\x45\x08\x39\x12\xa6\xcd\x3f\xe2\xbd\xaa\xff\x11\xe3\x99\x8d\x70\xbd\xf6\x1d\x00\x00\xff\xff\xdc\x4e\x83\x4b\xf2\x00\x00\x00")

func templatesErrorGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorGohtml,
		"templates/error.gohtml",
	)
}

func templatesErrorGohtml() (*asset, error) {
	bytes, err := templatesErrorGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.gohtml", size: 242, mode: os.FileMode(438), modTime: time.Unix(1595325274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFooterGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xc1\x6a\x84\x30\x10\x00\xd0\xfb\xc2\xfe\xc3\x90\x43\x6f\xab\xe2\xb1\xc4\x50\xdb\x73\x2f\xfe\xc1\x68\x46\x1d\x18\x1d\x49\x82\x20\x21\xff\x5e\xca\xe2\xf5\xf1\x72\xf6\x34\xf3\x4e\x60\x66\xd5\x44\xc1\x94\xf2\x7c\x58\xcf\x27\x4c\x82\x31\x76\x37\xbb\x5f\xf4\x04\xe3\x05\x16\x61\x0d\x34\x77\x66\x43\x96\xa4\x9f\x28\x23\x85\xa4\xd5\x18\x68\x11\xc6\x5d\xbf\x12\x09\x4d\xba\x71\x42\x61\xac\x38\x19\xd7\xbf\x0f\x7c\xdf\xc7\xd6\xe8\xe0\x05\x3f\x7a\x5c\x81\x97\x35\x41\xdb\xb4\x0d\x7c\x4c\x7a\x5c\xf0\x82\x5e\x04\x86\x7f\x8e\x30\x50\xa4\x70\x92\xb7\xb5\xe7\xd3\x3d\x1f\x39\xd3\xee\x4b\xf9\x0b\x00\x00\xff\xff\x4e\xb3\xe9\xf0\xb6\x00\x00\x00")

func templatesFooterGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFooterGohtml,
		"templates/footer.gohtml",
	)
}

func templatesFooterGohtml() (*asset, error) {
	bytes, err := templatesFooterGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/footer.gohtml", size: 182, mode: os.FileMode(438), modTime: time.Unix(1595184932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGrazieGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x4a\xc5\x30\x10\x85\xf7\x81\xbc\xc3\x18\x70\xa9\x23\xde\xed\x34\x1b\x15\x5d\x08\xba\x70\xe3\x32\xde\x4e\x93\x40\x62\x4a\x3a\x22\x5a\xfa\xee\x97\xa6\x14\xba\x3a\xf3\xc3\x07\xdf\xa1\xab\xc7\xb7\x87\x8f\xcf\xf7\x27\x08\x92\x93\xd5\x8a\x5a\x82\x56\xf3\x2c\x9c\xc7\xe4\x84\xc1\x04\x76\x3d\x57\xb3\x2c\x5a\x91\x44\x49\x6c\x9f\xab\xfb\x8f\x4c\xb8\x6d\x5a\xd1\x57\xe9\xff\x1a\x7e\xb2\x84\xe1\xb4\x8e\x31\x7b\x98\xea\xb9\x33\x38\x89\x93\x78\x46\xdf\xa0\xdb\xf1\xdb\x1b\xf8\x8d\xbd\x84\xee\xfe\xee\x1a\xd0\x6a\x05\x00\x40\x0e\x42\xe5\xa1\x33\x68\xec\x4b\xc9\x4c\xe8\x2c\xdc\x1c\xce\xa9\xf8\xf2\x23\xc6\xbe\xb6\x5c\xdf\x1b\x78\x34\x1d\x4a\x91\xdd\x14\x77\x27\x6c\x9d\x2e\x01\x00\x00\xff\xff\x7d\x44\xce\xdf\xeb\x00\x00\x00")

func templatesGrazieGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesGrazieGohtml,
		"templates/grazie.gohtml",
	)
}

func templatesGrazieGohtml() (*asset, error) {
	bytes, err := templatesGrazieGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/grazie.gohtml", size: 235, mode: os.FileMode(438), modTime: time.Unix(1595336965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x31\x0a\x02\x31\x14\x44\xfb\x85\xbd\x43\xf8\xbd\x9b\xd6\x62\xd7\xd2\x13\xe8\x01\x42\x32\x21\x1f\x63\x16\xf2\x3f\x82\x84\xdc\x5d\x82\xdb\x68\x37\xcc\x7b\x03\xd3\x5a\x40\xe4\x02\x43\x09\x2e\xa0\x52\xef\xf3\xb4\x8e\x7c\x99\xa7\x35\x73\x79\x98\x8a\xbc\x91\xe8\x3b\x43\x12\xa0\x64\x52\x45\xdc\xc8\x8a\x3a\x65\x6f\xbf\x64\xf1\x22\xf4\x3b\x61\xbf\x97\x7f\x39\xba\xd7\xa8\x17\xf6\x3b\x19\x3b\xfc\x27\xd4\x19\x9f\x5c\x15\xe8\x46\xf7\xdb\xf5\x74\x3e\x88\x3d\x5e\xb4\x86\x12\x7a\xff\x04\x00\x00\xff\xff\x65\x04\xbb\x89\xaa\x00\x00\x00")

func templatesHeaderGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderGohtml,
		"templates/header.gohtml",
	)
}

func templatesHeaderGohtml() (*asset, error) {
	bytes, err := templatesHeaderGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.gohtml", size: 170, mode: os.FileMode(438), modTime: time.Unix(1595322673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\xce\xda\x30\x10\x85\xf7\x91\x72\x87\xe9\x1c\xa0\xbe\x80\x1d\xa9\x6a\x59\x22\x50\x43\x2b\xb1\xaa\x4c\x3c\x80\x2b\x3b\x8e\xec\x71\xda\x08\x71\xf7\x5f\x09\x81\x00\xab\x3f\x1b\xdb\x2f\xa3\x7c\x2f\xcf\x4f\x7e\xf9\xb1\xf9\xbe\xdb\x6f\x57\x70\x66\xef\xaa\xb2\x90\xf3\x7a\xb9\x30\xf9\xce\x69\x26\xc0\x33\x69\x43\x11\xaf\xd7\xb2\x90\x6c\xd9\x51\x55\xe7\xd8\xd3\x00\xf5\x90\x98\xbc\x14\x37\xb1\x2c\xe4\x21\x98\xa1\x2a\x8b\xb2\x00\x90\xc6\xf6\xd0\x38\x9d\x92\xc2\xe9\x3d\x56\xf5\xaf\x9f\xbf\x57\x7b\xa8\xf7\xf5\x6e\xb5\x96\xc2\xd8\xbe\x9a\x26\x0f\xf1\x75\xb5\xfe\x04\x29\x36\x0a\x45\x62\xcd\xb6\x11\x69\xc2\x7d\xfd\xdb\x9d\x50\xbc\x8e\x8e\x10\x6b\x14\x76\x21\xf1\x9f\x63\x88\x1e\x27\x7d\x7c\xe4\x78\x04\x4f\x7c\x0e\x46\xe1\x76\x53\xef\x10\x74\xc3\x36\xb4\x0a\x85\x0b\x27\xdb\x2e\xb3\x00\x32\xbb\x6a\xda\x2c\xd2\xe8\xa4\xed\x32\xdf\xff\x22\x86\xdc\x1a\x32\x08\xad\xf6\xa4\x30\x27\x8a\xe3\x0e\x81\x87\x8e\x14\x32\xfd\x67\x84\x5e\xbb\x4c\x0a\xd7\x9a\xa3\x6d\x82\xd3\x08\xe2\x99\x32\xfb\xfe\x14\xa0\xd3\x29\xfd\x0b\xd1\xdc\x01\xcb\x79\x86\x6c\x1f\xc2\x13\xe3\x1d\xf1\x80\xdc\x3e\x92\xf2\xc1\xdb\xc5\xe7\xb7\xa6\x21\x63\xdf\x4c\x8a\xec\x96\x14\xc5\x18\xe3\x2d\xec\xf9\xc6\xca\x62\x0a\xe9\xb9\x21\xc7\x10\x78\x6e\x48\x59\x48\x31\xd7\x40\x8a\xa9\x4c\x1f\x01\x00\x00\xff\xff\x35\x37\x80\xda\x64\x02\x00\x00")

func templatesIndexGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGohtml,
		"templates/index.gohtml",
	)
}

func templatesIndexGohtml() (*asset, error) {
	bytes, err := templatesIndexGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.gohtml", size: 612, mode: os.FileMode(438), modTime: time.Unix(1595322804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLogoutGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x4b\xc6\x30\x10\x86\xf7\x40\xfe\xc3\x19\x70\xf5\xc4\xae\xd7\x2c\x2a\x38\x08\x3a\xb8\x38\xc6\xf6\xd2\x04\x12\x53\xd2\x2b\x22\xa5\xff\x5d\xcc\xd7\xc2\x37\x1d\xc7\x73\xf7\xf2\xbc\x74\xf3\xf4\xf6\xf8\xf1\xf9\xfe\x0c\x41\x72\xb2\x5a\xd1\x31\xb7\x4d\x38\xcf\xc9\x09\x83\x09\xec\x46\xae\x66\xdf\xb5\x22\x89\x92\xd8\xbe\x96\xa9\xac\x42\x78\xd9\xb4\xa2\xaf\x32\xfe\xb6\xef\xee\x60\xc0\xde\xb3\xc8\xea\xa4\x10\x86\xee\x9f\xc5\x3c\xc1\x52\x87\xde\xe0\x22\x4e\xe2\x80\xa9\x5d\xde\xcd\xdf\x93\x81\x9f\x38\x4a\xe8\x1f\xee\x6f\x01\x5b\x5e\xb5\x5a\x01\x00\x90\x83\x50\xd9\xf7\x06\x8d\x7d\x29\x99\x09\xdd\x41\xae\x0d\x7d\x29\x72\x1a\xe2\xe9\x82\xad\xca\x5f\x00\x00\x00\xff\xff\xc0\x1f\xc0\xcb\xe2\x00\x00\x00")

func templatesLogoutGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogoutGohtml,
		"templates/logout.gohtml",
	)
}

func templatesLogoutGohtml() (*asset, error) {
	bytes, err := templatesLogoutGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logout.gohtml", size: 226, mode: os.FileMode(438), modTime: time.Unix(1595338204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSurveyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x41\x6f\xdb\x3a\x0c\xbe\x07\xc8\x7f\xe0\x13\xfa\x80\xf7\x8a\x36\x4e\x91\x75\x87\xc4\xf6\xa5\xd9\x80\x1c\xd6\x76\x68\x36\x60\x47\x25\x62\x62\x0e\xb2\xe4\xca\x72\x9a\xd4\xf0\x7f\x1f\x24\xdb\x89\x83\x06\xe9\x36\x5f\x24\x93\x9f\x3e\x7e\xa4\x28\x29\xfc\x67\xfa\x70\x37\xff\xf1\xf8\x09\x12\x9b\xca\xb8\xdf\x0b\x9b\xb1\x2c\x2d\xa6\x99\xe4\x16\x81\x25\xc8\x05\x1a\x56\x55\xfd\x5e\xb8\xd0\x62\xe7\x60\x96\xac\xc4\xb8\x2c\x07\x73\xb2\x5a\xea\xaa\x0a\x83\xda\xe4\x28\x6e\x8e\x1d\xc9\x8d\xb7\x8e\xe2\x99\xa2\x57\xd2\x63\x28\xcb\x41\x3d\xad\x2a\xf8\x4c\x0a\xbd\xc5\x4d\x3c\x7a\xd4\xa0\xef\x88\x6b\xe7\xf8\x66\x51\x59\xac\xaa\xab\xc6\xd7\xef\x85\x82\x36\xb0\x94\x3c\xcf\x23\xf6\x5c\x60\x6e\x49\xab\x9c\x81\x97\x1d\x5c\x42\x48\xe9\x1a\x72\xb3\x8c\x58\x90\x5b\x6e\x69\x19\x7c\x6d\x41\x83\x9f\xd9\x9a\x41\x6e\x77\x12\x23\xf6\x42\xc2\x26\xe3\xd1\xed\xbf\x93\x4c\xe7\xe4\xfc\xe3\x15\x6d\x51\x4c\x0c\xad\x13\x3b\xfe\x90\x6d\x27\x56\x67\xe3\x9b\x61\xb6\x9d\xbc\x5e\x93\x12\xb8\x1d\x5f\xdf\xb2\x20\x86\xcb\xc0\x17\x23\x10\xb4\x71\x62\x69\x65\x78\x8a\x2d\xed\xbb\x64\x0c\x7c\xe4\x88\xdd\x0e\x87\x0c\x12\x74\x80\x88\x8d\x3e\x0e\x99\x57\x5d\x96\x83\xef\x24\xd0\x15\x87\x4b\xa9\x5f\x56\x85\x94\xf9\xd2\x20\xaa\x38\x0c\xea\x50\x71\x5d\x03\x37\xac\xb4\x49\x21\x45\x9b\x68\x11\xb1\xc7\x87\xa7\x39\x03\xbe\x74\xe1\x5d\xf6\x85\xd9\xe0\x8e\x79\x89\x2a\x2b\x2c\xd8\x5d\x86\x11\x4b\x48\x08\x54\x0c\x48\x44\xac\x86\xcc\xa6\x0c\x14\x4f\xb1\xfb\xbf\xe1\xb2\x40\x27\x66\x36\xad\xaa\x73\x14\x85\xdf\x9f\x96\xa0\xfd\xdb\x2f\x6f\xb7\xef\x1c\x45\xca\xad\xa1\xa5\x96\xbc\x65\xe9\x18\xf6\x44\x5f\x5a\x5b\xcd\xa5\xeb\x36\x35\x5c\xad\x11\x2e\xfc\xee\x5c\xc1\x85\x47\xc3\x38\x82\xc1\x54\xa7\x5c\x09\x6c\x46\xee\x36\xac\xdf\x03\x00\x28\x4b\xa0\x15\xfc\x87\xcf\x30\x98\x53\xa6\x81\x2d\xb4\x96\xc8\x15\x67\xff\x83\x43\x41\xf3\x85\x92\x7c\x1f\xe3\xd6\xba\xbe\x94\x14\x77\x7c\xdd\x4c\x0c\x17\xa4\x9b\x72\x52\x93\x81\xaf\xdb\x3e\x74\x93\x84\x77\x1b\x7c\x2e\xc8\xa0\xe8\xb2\x49\xbe\x40\x09\x2b\x6d\x3c\x24\x7e\xa2\x30\xf0\xa6\xdf\x88\xa8\xf4\xd9\x88\xce\xfd\x4e\x44\xa5\x59\x7c\xaf\x4f\x44\x5c\x98\xb8\xad\x18\x2a\x71\xa6\x80\x92\x16\x68\xfe\xba\x7c\x16\xb7\x96\x1b\xe4\x75\x3e\x87\xbf\x33\x59\xdd\x4f\xdf\x64\xf5\x9e\xc6\xb4\x90\x96\x32\xf9\x47\x2a\x73\x94\xb8\xb4\x27\x85\x38\xa9\x28\x31\x45\x65\x89\x41\x43\x8e\xdd\xc5\x3a\x73\xa7\xb0\xab\xb8\xa6\x43\xd7\x26\xcd\x8c\xc5\xf7\xd3\x30\xa8\x91\x9d\xb5\xc7\x5d\x6d\x8e\xda\xfa\x21\x7b\x25\xad\xa8\x19\xb1\x9b\xcb\x89\xb8\x65\x59\x2f\xad\xaa\xf8\x30\x3d\x19\xb1\xa9\xde\x9e\x26\xa8\x35\xbe\xad\xee\x01\x7a\xb4\x8b\x79\xb1\x48\xc9\xb6\xc7\x95\xcd\xd4\x86\xb8\xbf\x79\x02\x7f\x50\xc3\xc0\x5d\x54\xf1\xe1\xd2\xec\x3e\x30\x2b\xad\x6d\xfb\xc0\x04\xed\x0b\x13\xf8\x97\xe8\x57\x00\x00\x00\xff\xff\xc3\x79\x75\xb9\xa1\x06\x00\x00")

func templatesSurveyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSurveyGohtml,
		"templates/survey.gohtml",
	)
}

func templatesSurveyGohtml() (*asset, error) {
	bytes, err := templatesSurveyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/survey.gohtml", size: 1697, mode: os.FileMode(438), modTime: time.Unix(1595345238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/error.gohtml": templatesErrorGohtml,
	"templates/footer.gohtml": templatesFooterGohtml,
	"templates/grazie.gohtml": templatesGrazieGohtml,
	"templates/header.gohtml": templatesHeaderGohtml,
	"templates/index.gohtml": templatesIndexGohtml,
	"templates/logout.gohtml": templatesLogoutGohtml,
	"templates/survey.gohtml": templatesSurveyGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"error.gohtml": &bintree{templatesErrorGohtml, map[string]*bintree{}},
		"footer.gohtml": &bintree{templatesFooterGohtml, map[string]*bintree{}},
		"grazie.gohtml": &bintree{templatesGrazieGohtml, map[string]*bintree{}},
		"header.gohtml": &bintree{templatesHeaderGohtml, map[string]*bintree{}},
		"index.gohtml": &bintree{templatesIndexGohtml, map[string]*bintree{}},
		"logout.gohtml": &bintree{templatesLogoutGohtml, map[string]*bintree{}},
		"survey.gohtml": &bintree{templatesSurveyGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

